//This file is automatically generated by Easy Motion
//DO NOT MODIFY THIS FILE; your changes will be overwritten

FunctionTable:
	@MCW;
	@MCCW;
	@GZR;
	@GTO;
	@GTOR;
	@GTON;
	@GTORN;
	@0;
	@0;
	@0;

MCW:
/*move counterclockwise until negative limit switch goes high*/
  CSPD = USPD;

  CACC = UACC;

  int switch1; // Define integer variable switch1

  switch1 = IN(1); //Read I/O line 1 data into variable switch1 ( 0 -> low, 1 -> high )

  CALL go_back_, switch1, NEQ; //Call function go_back_ if switch1 != 0

run1: //Define label run1

  CSPD = USPD;

  //Speed profile
  MODE SP;
  TUM1; //set Target Update Mode 1
  UPD; // execute immediate

  // Define event : When the digital input IN1 is high
  !IN#1 1;
  STOP!; // Stop the motion when event occurs
  WAIT!; // Wait until the event occurs

  CALL go_back_; //Call function go_back_

  RET; //Return from function

go_back_: //Define label go_back_

  //Speed profile
  CSPD = -30.;//jog speed = -30[IU]
  MODE SP;
  TUM1; //set Target Update Mode 1
  UPD; // execute immediate

  // Define event : When the digital input IN1 is low
  !IN#1 0;
  STOP!; // Stop the motion when event occurs
  WAIT!; // Wait until the event occurs

	RET;

MCCW:
/*move counterclockwise until negative limit switch goes high*/
  CACC = UACC;

  int switch1w; // Define integer variable switch1w

  switch1w = IN(1); //Read I/O line 1 data into variable switch1w ( 0 -> low, 1 -> high )

  CALL go_back_w, switch1w, NEQ; //Call function go_back_w if switch1w != 0

run1w: //Define label run1w

  CSPD = -USPD;

  //Speed profile
  MODE SP;
  TUM1; //set Target Update Mode 1
  UPD; // execute immediate

  // Define event : When the digital input IN1 is high
  !IN#1 1;
  STOP!; // Stop the motion when event occurs
  WAIT!; // Wait until the event occurs

  CALL go_back_w; //Call function go_back_w

  RET; //Return from function

go_back_w: //Define label go_back_w

  //Speed profile
  CSPD = 30.;//jog speed = 30[IU]
  MODE SP;
  TUM1; //set Target Update Mode 1
  UPD; // execute immediate

  // Define event : When the digital input IN1 is low
  !IN#1 0;
  STOP!; // Stop the motion when event occurs
  WAIT!; // Wait until the event occurs

	RET;

GZR:
/*go to absolute zero*/
  int center; // Define integer variable center

  center = IN(0); //Read I/O line 0 data into variable center ( 0 -> low, 1 -> high )

  GOTO move_cw, center, EQ; //Branch to move_cw if center == 0

  //Speed profile
  CACC = 0.5;//acceleration rate = 0.5[IU]
  CSPD = -200.;//jog speed = -200[IU]
  MODE SP;
  TUM1; //set Target Update Mode 1
  UPD; // execute immediate

  // Define event : When the digital input IN0 is low
  !IN#0 0;
  STOP!; // Stop the motion when event occurs
  WAIT!; // Wait until the event occurs

  GOTO go_back; //Branch to go_back

move_cw: //Define label move_cw

  //Speed profile
  CACC = 0.5;//acceleration rate = 0.5[IU]
  CSPD = 200.;//jog speed = 200[IU]
  MODE SP;
  TUM1; //set Target Update Mode 1
  UPD; // execute immediate

  // Define event : When the digital input IN0 is high
  !IN#0 1;
  STOP!; // Stop the motion when event occurs
  WAIT!; // Wait until the event occurs

go_back: //Define label go_back

  CPOS = APOF;

  SAP 0L; // Set actual position value to 0[rot]

  //Position profile
  CACC = 0.5;//acceleration rate = 0.5[IU]
  CSPD = 40.;//slew speed = 40[IU]
  CPR; //position command is relative
  MODE PP;
  TUM1; //set Target Update Mode 1
  UPD; // execute immediate
  !MC; WAIT!; // wait for completion

  SAP 0L; // Set actual position value to 0[rot]

  RET; //Return from function

	RET;

GTO:
/*go to user-selected absolute value*/
  CACC = UACC;

  CPOS = UPOS;

  CALL gto_main; //Call function gto_main

gto_main: //Define label gto_main

  CSPD = USPD;

  //Position profile
  CACC = 0.39114;//acceleration rate = 300[rad/s^2]
  CPA; //position command is absolute
  MODE PP;
  TUM1; //set Target Update Mode 1
  UPD; // execute immediate
  !MC; WAIT!; // wait for completion

  // Define event : When the digital input IN1 is high
  !IN#1 1;
  STOP!; // Stop the motion when event occurs

  int sw1; // Define integer variable sw1

  sw1 = IN(1); //Read I/O line 1 data into variable sw1 ( 0 -> low, 1 -> high )

  CALL go_back_gto, sw1, NEQ; //Call function go_back_gto if sw1 != 0

  RET; //Return from function

go_back_gto: //Define label go_back_gto

  CSPD = -USPD;

  //Speed profile
  MODE SP;
  TUM1; //set Target Update Mode 1
  UPD; // execute immediate

  // Define event : When the digital input IN1 is low
  !IN#1 0;
  STOP!; // Stop the motion when event occurs
  WAIT!; // Wait until the event occurs

	RET;

GTOR:
/*go to user-selected absolute value*/
  CACC = UACC;

  CPOS = -UPOS;

  CALL gtor_main; //Call function gtor_main

gtor_main: //Define label gtor_main

  CSPD = -USPD;

  //Position profile
  CACC = 0.39114;//acceleration rate = 300[rad/s^2]
  CPA; //position command is absolute
  MODE PP;
  TUM1; //set Target Update Mode 1
  UPD; // execute immediate
  !MC; WAIT!; // wait for completion

  // Define event : When the digital input IN1 is high
  !IN#1 1;
  STOP!; // Stop the motion when event occurs

  int sw2; // Define integer variable sw2

  sw2 = IN(1); //Read I/O line 1 data into variable sw2 ( 0 -> low, 1 -> high )

  CALL go_back_gtor, sw2, NEQ; //Call function go_back_gtor if sw2 != 0

  RET; //Return from function

go_back_gtor: //Define label go_back_gtor

  CSPD = USPD;

  //Speed profile
  MODE SP;
  TUM1; //set Target Update Mode 1
  UPD; // execute immediate

  // Define event : When the digital input IN1 is low
  !IN#1 0;
  STOP!; // Stop the motion when event occurs
  WAIT!; // Wait until the event occurs

	RET;

GTON:
/*go to user-selected absolute value*/
  fixed MAXPOS; // Define fixed variable MAXPOS

  MAXPOS = 854302;

  CACC = UACC;

  CPOS = UPOS;

  fixed rel; // Define fixed variable rel

  rel = APOS;

  rel -= UPOS;

  CALL move_cw_1, rel, LEQ; //Call function move_cw_1 if rel <= 0

  CALL move_ccw, rel, GT; //Call function move_ccw if rel > 0

  RET; //Return from function

move_cw_1: //Define label move_cw_1

  fixed limit_cw; // Define fixed variable limit_cw

  limit_cw = MAXPOS;

  limit_cw -= UPOS;

  CSPD = USPD;

  CALL move_to, limit_cw, GEQ; //Call function move_to if limit_cw >= 0

  RET; //Return from function

move_ccw: //Define label move_ccw

  fixed limit_ccw; // Define fixed variable limit_ccw

  limit_ccw = -MAXPOS;

  limit_ccw -= UPOS;

  CSPD = -USPD;

  CALL move_to, limit_ccw, LT; //Call function move_to if limit_ccw < 0

  RET; //Return from function

move_to: //Define label move_to

  //Position profile
  CACC = 0.52151;//acceleration rate = 400[rad/s^2]
  CPA; //position command is absolute
  MODE PP;
  TUM1; //set Target Update Mode 1
  UPD; // execute immediate
  !MC; WAIT!; // wait for completion

	RET;

GTORN:
/*go to user-selected absolute value*/
  CACC = UACC;

  CPOS = UPOS;

  CSPD = USPD;

  //Position profile
  CACC = 0.6519;//acceleration rate = 500[rad/s^2]
  CPA; //position command is absolute
  MODE PP;
  TUM1; //set Target Update Mode 1
  UPD; // execute immediate
  !MC; WAIT!; // wait for completion

  fixed POS; // Define fixed variable POS

  POS = 854302;

  POS -= APOS;

  CALL go_back_to_180, POS, LT; //Call function go_back_to_180 if POS < 0

  RET; //Return from function

go_back_to_180: //Define label go_back_to_180

  CSPD = -USPD;

  fixed POS180; // Define fixed variable POS180

  POS180 = 854302;

  CPOS = POS180;

  //Position profile
  CPA; //position command is absolute
  MODE PP;
  TUM1; //set Target Update Mode 1
  UPD; // execute immediate
  !MC; WAIT!; // wait for completion

  RET; //Return from function

	RET;

