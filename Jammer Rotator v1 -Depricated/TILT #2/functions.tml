//This file is automatically generated by Easy Motion
//DO NOT MODIFY THIS FILE; your changes will be overwritten

FunctionTable:
	@MCW;
	@MCCW;
	@GZR;
	@GTO;
	@TTT;
	@0;
	@0;
	@0;
	@0;
	@0;

MCW:
/*move clockwise until positive limit switch goes high*/
  CSPD = USPD;

  CACC = UACC;

  //Speed profile
  MODE SP;
  TUM1; //set Target Update Mode 1
  UPD; // execute immediate

	RET;

MCCW:
/*move counterclockwise until negative limit switch goes high*/
  CSPD = -USPD;

  CACC = UACC;

  //Speed profile
  MODE SP;
  TUM1; //set Target Update Mode 1
  UPD; // execute immediate

	RET;

GZR:
/*go to absolute zero*/
  int center; // Define integer variable center

  center = IN(0); //Read I/O line 0 data into variable center ( 0 -> low, 1 -> high )

  GOTO move_cw, center, EQ; //Branch to move_cw if center == 0

  GOTO move_cw_r, center, GT; //Branch to move_cw_r if center > 0

  GOTO go_back; //Branch to go_back

move_cw: //Define label move_cw

  //Speed profile
  CACC = 0.5;//acceleration rate = 0.5[IU]
  CSPD = 100.;//jog speed = 100[IU]
  MODE SP;
  TUM1; //set Target Update Mode 1
  UPD; // execute immediate

  // Define event : When the digital input IN0 is high
  !IN#0 1;
  STOP!; // Stop the motion when event occurs
  WAIT!; // Wait until the event occurs

  GOTO go_back; //Branch to go_back

move_cw_r: //Define label move_cw_r

  //Speed profile
  CACC = 0.5;//acceleration rate = 0.5[IU]
  CSPD = -100.;//jog speed = -100[IU]
  MODE SP;
  TUM1; //set Target Update Mode 1
  UPD; // execute immediate

  // Define event : When the digital input IN0 is low
  !IN#0 0;
  STOP!; // Stop the motion when event occurs
  WAIT!; // Wait until the event occurs

  GOTO go_back_r; //Branch to go_back_r

go_back: //Define label go_back

  CPOS = APOF;

  SAP 0L; // Set actual position value to 0[rot]

  //Position profile
  CACC = 0.5;//acceleration rate = 0.5[IU]
  CSPD = 40.;//slew speed = 40[IU]
  CPR; //position command is relative
  MODE PP;
  TUM1; //set Target Update Mode 1
  UPD; // execute immediate
  !MC; WAIT!; // wait for completion

  SAP 0L; // Set actual position value to 0[rot]

  RET; //Return from function

go_back_r: //Define label go_back_r

  CPOS = APOF;

  SAP 0L; // Set actual position value to 0[rot]

  //Position profile
  CACC = 0.5;//acceleration rate = 0.5[IU]
  CSPD = -40.;//slew speed = -40[IU]
  CPR; //position command is relative
  MODE PP;
  TUM1; //set Target Update Mode 1
  UPD; // execute immediate
  !MC; WAIT!; // wait for completion

  SAP 0L; // Set actual position value to 0[rot]

  RET; //Return from function

	RET;

GTO:
/*go to user-selected absolute value*/
  CSPD = USPD;

  CACC = UACC;

  CPOS = UPOS;

  //Position profile
  CPA; //position command is absolute
  MODE PP;
  TUM1; //set Target Update Mode 1
  UPD; // execute immediate
  !MC; WAIT!; // wait for completion

	RET;

TTT:
  int center_1; // Define integer variable center_1

  center_1 = IN(0); //Read I/O line 0 data into variable center_1 ( 0 -> low, 1 -> high )

  GOTO move_cw1; //Branch to move_cw1

move_cw1: //Define label move_cw1

  //Speed profile
  CACC = 0.5;//acceleration rate = 0.5[IU]
  CSPD = 200.;//jog speed = 200[IU]
  MODE SP;
  TUM1; //set Target Update Mode 1
  UPD; // execute immediate

  // Define event : When the digital input IN0 is high
  !IN#0 1;
  STOP!; // Stop the motion when event occurs
  WAIT!; // Wait until the event occurs

	RET;

